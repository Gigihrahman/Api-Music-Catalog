// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=tracks
//

// Package tracks is a generated GoMock package.
package tracks

import (
	trackacktivities "api-music/internal/models/trackacktivities"
	spotify "api-music/internal/repository/spotify"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockspotifyOutbond is a mock of spotifyOutbond interface.
type MockspotifyOutbond struct {
	ctrl     *gomock.Controller
	recorder *MockspotifyOutbondMockRecorder
	isgomock struct{}
}

// MockspotifyOutbondMockRecorder is the mock recorder for MockspotifyOutbond.
type MockspotifyOutbondMockRecorder struct {
	mock *MockspotifyOutbond
}

// NewMockspotifyOutbond creates a new mock instance.
func NewMockspotifyOutbond(ctrl *gomock.Controller) *MockspotifyOutbond {
	mock := &MockspotifyOutbond{ctrl: ctrl}
	mock.recorder = &MockspotifyOutbondMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspotifyOutbond) EXPECT() *MockspotifyOutbondMockRecorder {
	return m.recorder
}

// GetRecommendation mocks base method.
func (m *MockspotifyOutbond) GetRecommendation(ctx context.Context, limit int, trackID string) (*spotify.SpotifyRecommendationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendation", ctx, limit, trackID)
	ret0, _ := ret[0].(*spotify.SpotifyRecommendationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendation indicates an expected call of GetRecommendation.
func (mr *MockspotifyOutbondMockRecorder) GetRecommendation(ctx, limit, trackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendation", reflect.TypeOf((*MockspotifyOutbond)(nil).GetRecommendation), ctx, limit, trackID)
}

// Search mocks base method.
func (m *MockspotifyOutbond) Search(ctx context.Context, query string, limit, offset int) (*spotify.SpotifySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, limit, offset)
	ret0, _ := ret[0].(*spotify.SpotifySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockspotifyOutbondMockRecorder) Search(ctx, query, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockspotifyOutbond)(nil).Search), ctx, query, limit, offset)
}

// MocktrackActivitiesRepository is a mock of trackActivitiesRepository interface.
type MocktrackActivitiesRepository struct {
	ctrl     *gomock.Controller
	recorder *MocktrackActivitiesRepositoryMockRecorder
	isgomock struct{}
}

// MocktrackActivitiesRepositoryMockRecorder is the mock recorder for MocktrackActivitiesRepository.
type MocktrackActivitiesRepositoryMockRecorder struct {
	mock *MocktrackActivitiesRepository
}

// NewMocktrackActivitiesRepository creates a new mock instance.
func NewMocktrackActivitiesRepository(ctrl *gomock.Controller) *MocktrackActivitiesRepository {
	mock := &MocktrackActivitiesRepository{ctrl: ctrl}
	mock.recorder = &MocktrackActivitiesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrackActivitiesRepository) EXPECT() *MocktrackActivitiesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocktrackActivitiesRepository) Create(ctx context.Context, model trackacktivities.TrackActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MocktrackActivitiesRepositoryMockRecorder) Create(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocktrackActivitiesRepository)(nil).Create), ctx, model)
}

// Get mocks base method.
func (m *MocktrackActivitiesRepository) Get(ctx context.Context, UserID uint, spotifyID string) (*trackacktivities.TrackActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, UserID, spotifyID)
	ret0, _ := ret[0].(*trackacktivities.TrackActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocktrackActivitiesRepositoryMockRecorder) Get(ctx, UserID, spotifyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocktrackActivitiesRepository)(nil).Get), ctx, UserID, spotifyID)
}

// GetBulkSpotifyIDs mocks base method.
func (m *MocktrackActivitiesRepository) GetBulkSpotifyIDs(ctx context.Context, UserID uint, spotifyIDs []string) (map[string]trackacktivities.TrackActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkSpotifyIDs", ctx, UserID, spotifyIDs)
	ret0, _ := ret[0].(map[string]trackacktivities.TrackActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBulkSpotifyIDs indicates an expected call of GetBulkSpotifyIDs.
func (mr *MocktrackActivitiesRepositoryMockRecorder) GetBulkSpotifyIDs(ctx, UserID, spotifyIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkSpotifyIDs", reflect.TypeOf((*MocktrackActivitiesRepository)(nil).GetBulkSpotifyIDs), ctx, UserID, spotifyIDs)
}

// Update mocks base method.
func (m *MocktrackActivitiesRepository) Update(ctx context.Context, model trackacktivities.TrackActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MocktrackActivitiesRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocktrackActivitiesRepository)(nil).Update), ctx, model)
}
